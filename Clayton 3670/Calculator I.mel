global proc float Addition (float $numbers[])
{
	float $sum = $numbers[0];

	for ($i=1; $i<size($numbers); $i++)
	{
		$sum += $numbers[$i];
	}

	return $sum;

}


global proc float Subtraction (float $numbers[])
{
	float $difference = $numbers[0];

	for ($i=1; $i<size($numbers); $i++)
	{
		$difference -= $numbers[$i];
	}

	return $difference;

}


global proc float Multiplication (float $numbers[])
{
	float $result = $numbers[0];

	for ($i=1; $i<size($numbers); $i++)
	{
		$result *= $numbers[$i];
	}

	return $result;

}


global proc float Division (float $numbers[])
{
	float $result = $numbers[0];

	for ($i=1; $i<size($numbers); $i++)
	{
		$result /= $numbers[$i];
	}

	return $result;

}


global proc float Power (float $x, float $n)
{
	float $result = $x;

	for ($i=1; $i<$n; $i++)
	{
		$result *= $x;
	}

	return $result;

}


global proc float Median (float $numbers[])
{
    float $midpoint;
    float $midpointOne;
    float $midpointTwo;
    float $median;
	$sorted = `sort $numbers`;
	$sizeNum= `size($numbers)`;
    $checkNum= $sizeNum%2;
	if ($checkNum == 1) { //check if num is odd
        int $midpoint = (($sizeNum/2.0) + 0.5); //divide by 2 and round decimal up by adding 0.5.
        $median = $sorted[$midpoint];
	} else {
	    int $midpointTwo = ($sizeNum/2.0); //second midpoint
	    int $midpointOne = $midpointTwo - 1; //first midpoint
	    $median = (($sorted[$midpointOne]+$sorted[$midpointTwo])/2);
	}
	return $median;
}
Median({3,4,1,5})



global proc float Mean (float $numbers[])
{
	float $sum = $numbers[0];

	for ($i=1; $i<size($numbers); $i++)
	{
		$sum += $numbers[$i];
	}

	float $mean = $sum/size($numbers);
	return $mean;
}
Mean ({3,4,1,5,4})





global proc float Mode (float $numbers[])
{
	$sorted = `sort $arr`; //sort array
    //init values
    int $values[]; //init values array
    int $freq[1]; //freq starts at 1
    int $first = 0; //first index begins
    $arr_count = 0; //going to keep track of array index
    $values[$arr_count] = ($sorted[$first]); //add first value to values[0]
    int $next; //init next val

    //$values[$arr_count] = ($sorted[$first]); //add first value to values arr

    //creating values and freq arr's

    for ($i=0; $i<size($sorted); $i++) //run thru sorted list
    {	
        $arr_count += 1; //need iterate to go to next values. Going to be values[1, 2, 3,..]
    
        $next = $first + 1; //next will be iteration of first
    
        if ($next == size($sorted)) {
            break;
        } if ($sorted[$next] != $sorted[$first]) {
            $values[$arr_count] = $sorted[$next]; //put next number into values arr
            $freq[$arr_count] = 1; //add new freq into freq arr
        } else {
            if ($first < size($freq)) {
                $freq[$first] = ($freq[$first] + 1); //if numbers are the same,
                //and we are not yet out of range by index
                //we will add to the current freq by 1
            } else {
                $freq[$first-1] = ($freq[$first-1] + 1);
                break;
         };
         $first = $next;
    }
    print $values;
    print $freq;
    
    
    //find highest freq in freq arr
    $highest = $freq[0];
    for ($i=0; $i<size($freq); $i++)
    {
        if ($i > $highest) {
            $highest = $i;
        }      
    }
    
    //find index of highest num
    $index = 0;
    for ($i=0; $i<size($freq); $i++)
    {
        if ($freq[$index] == $highest) { //check to see if we've reached the right one
            break;
        } else {
            $index += 1; //otherwise, iterate the index num
        }
    }

    $mode = $values[$index]; //now we have the same index of where our mode is in values
    print $mode;
    return $mode;

}
Mode ({3,4,1,5,4})




int $arr[] = {3,4,1,5,4};

$sorted = `sort $arr`; //sort array
//init values
int $values[]; //init values array
int $freq[1]; //freq starts at 1
int $first = 0; //first index begins
$arr_count = 0; //going to keep track of array index
$values[$arr_count] = ($sorted[$first]); //add first value to values[0]
int $next; //init next val


//creating values and freq arr's

for ($i=0; $i<size($sorted); $i++) //run thru sorted list
{	
    $arr_count += 1; //need iterate to go to next values. Going to be values[1, 2, 3,..]
    
    $next = $first + 1; //next will be iteration of first
    
    if ($next == size($sorted)) {
        break;
    } if ($sorted[$next] != $sorted[$first]) {
        $values[$arr_count] = $sorted[$next]; //put next number into values arr
        $freq[$arr_count] = 1; //add new freq into freq arr
    } else {
        if ($first < size($freq)) {
            $freq[$first] = ($freq[$first] + 1); //if numbers are the same,
            //and we are not yet out of range by index
            //we will add to the current freq by 1
        } else {
            $freq[$first-1] = ($freq[$first-1] + 1);
            break;
     };
     $first = $next;
    }

    
    
    //find highest freq in freq arr
    $highest = $freq[0];
    for ($i=0; $i<size($freq); $i++)
    {
        if ($i > $highest) {
            $highest = $i;
        }      
    }
    
    //find index of highest num
    $index = 0;
    for ($i=0; $i<size($freq); $i++)
    {
        if ($freq[$index] == $highest) { //check to see if we've reached the right one
            break;
        } else {
            $index += 1; //otherwise, iterate the index num
        }
    }

    $mode = $values[$index]; //now we have the same index of where our mode is in values
    print $mode;
    //return mode

}

print (size($sorted));

for ($i=0; $i<(size($sorted)); $i++)
{
    $arr_count += 1;
    print $sorted[arr_count];
}



int $arr[] = {3,4,1,5,4};

$sorted = `sort $arr`; //sort array
//init values
int $values[] = []; //init values array
int $freq[1]; //freq starts at 1
int $first = 0; //first index begins
$arr_count = 0; //going to keep track of array index
$values[$arr_count] = ($sorted[$first]); //add first value to values[0]
int $next; //init next val

for ($i=0; $i<(size($sorted)); $i++) //run thru sorted list
{	
    print $values;
    print "valsEnd";
    $arr_count += 1; //need iterate to go to next values. Going to be values[1, 2, 3,..]
    
    $next = $first + 1; //next will be iteration of first
    
    if ($next == size($sorted)) {
        break;
    } if ($sorted[$next] != $sorted[$first]) {
        $values[$arr_count] = $sorted[$next]; //put next number into values arr
        $freq[$arr_count] = 1; //add new freq into freq arr
    } else {
        if ($first < size($freq)) {
            $freq[$first] = ($freq[$first] + 1); //if numbers are the same,
            //and we are not yet out of range by index
            //we will add to the current freq by 1
        } else {
            $freq[$first-1] = ($freq[$first-1] + 1);
            break;
        }
    };
    $first = $next;
}


